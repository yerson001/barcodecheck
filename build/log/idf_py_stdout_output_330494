[1/9] Building C object esp-idf/cipher/CMakeFiles/__idf_cipher.dir/cipher.c.obj
[2/9] Linking C static library esp-idf/cipher/libcipher.a
[3/9] Performing build step for 'bootloader'
[1/1] cd /home/yrsn/esp/proyects/barcodecheck/build/bootloader/esp-idf/esptool_py && /home/yrsn/.espressif/python_env/idf5.4_py3.8_env/bin/python /home/yrsn/esp/esp-idf/components/partition_table/check_sizes.py --offset 0x8000 bootloader 0x1000 /home/yrsn/esp/proyects/barcodecheck/build/bootloader/bootloader.bin
Bootloader binary size 0x6580 bytes. 0xa80 bytes (9%) free.
[4/7] Generating ld/sections.ld
[5/7] Linking CXX executable barcodecheck.elf
[6/7] Generating binary image from built executable
esptool.py v4.8.1
Creating esp32 image...
Merged 2 ELF sections
Successfully created esp32 image.
Generated /home/yrsn/esp/proyects/barcodecheck/build/barcodecheck.bin
[7/7] cd /home/yrsn/esp/proyects/barcodecheck/build/esp-idf/esptool_py && /home/yrsn/.espressif/python_env/idf5.4_py3.8_env/bin/python /home/yrsn/esp/esp-idf/components/partition_table/check_sizes.py --offset 0x8000 partition --type app /home/yrsn/esp/proyects/barcodecheck/build/partition_table/partition-table.bin /home/yrsn/esp/proyects/barcodecheck/build/barcodecheck.bin
barcodecheck.bin binary size 0x30550 bytes. Smallest app partition is 0x100000 bytes. 0xcfab0 bytes (81%) free.
